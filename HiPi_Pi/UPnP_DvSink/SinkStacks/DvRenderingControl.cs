using OpenSource.UPnP;

namespace UPnP_DvSink.SinkStacks
{
    /// <summary>
    /// Transparent DeviceSide UPnP Service
    /// </summary>
    public class DvRenderingControl : IUPnPService
    {

        // Place your declarations above this line

        #region AutoGenerated Code Section [Do NOT Modify, unless you know what you're doing]
        //{{{{{ Begin Code Block

        private _DvRenderingControl _S;
        public static string URN = "urn:schemas-upnp-org:service:RenderingControl:1";
        public double VERSION
        {
           get
           {
               return(double.Parse(_S.GetUPnPService().Version));
           }
        }

        public enum Enum_A_ARG_TYPE_Channel
        {
            MASTER,
        }
        public Enum_A_ARG_TYPE_Channel A_ARG_TYPE_Channel
        {
            set
            {
               string v = "";
               switch(value)
               {
                  case Enum_A_ARG_TYPE_Channel.MASTER:
                     v = "Master";
                     break;
               }
               _S.SetStateVariable("A_ARG_TYPE_Channel",v);
            }
            get
            {
               Enum_A_ARG_TYPE_Channel RetVal = 0;
               string v = (string)_S.GetStateVariable("A_ARG_TYPE_Channel");
               switch(v)
               {
                  case "Master":
                     RetVal = Enum_A_ARG_TYPE_Channel.MASTER;
                     break;
               }
               return(RetVal);
           }
        }
        public enum Enum_A_ARG_TYPE_PresetName
        {
            FACTORYDEFAULTS,
        }
        public Enum_A_ARG_TYPE_PresetName A_ARG_TYPE_PresetName
        {
            set
            {
               string v = "";
               switch(value)
               {
                  case Enum_A_ARG_TYPE_PresetName.FACTORYDEFAULTS:
                     v = "FactoryDefaults";
                     break;
               }
               _S.SetStateVariable("A_ARG_TYPE_PresetName",v);
            }
            get
            {
               Enum_A_ARG_TYPE_PresetName RetVal = 0;
               string v = (string)_S.GetStateVariable("A_ARG_TYPE_PresetName");
               switch(v)
               {
                  case "FactoryDefaults":
                     RetVal = Enum_A_ARG_TYPE_PresetName.FACTORYDEFAULTS;
                     break;
               }
               return(RetVal);
           }
        }
        public enum Enum_PresetNameList
        {
            FACTORYDEFAULTS,
        }
        public Enum_PresetNameList PresetNameList
        {
            set
            {
               string v = "";
               switch(value)
               {
                  case Enum_PresetNameList.FACTORYDEFAULTS:
                     v = "FactoryDefaults";
                     break;
               }
               _S.SetStateVariable("PresetNameList",v);
            }
            get
            {
               Enum_PresetNameList RetVal = 0;
               string v = (string)_S.GetStateVariable("PresetNameList");
               switch(v)
               {
                  case "FactoryDefaults":
                     RetVal = Enum_PresetNameList.FACTORYDEFAULTS;
                     break;
               }
               return(RetVal);
           }
        }
        static public string Enum_A_ARG_TYPE_Channel_ToString(Enum_A_ARG_TYPE_Channel en)
        {
            string RetVal = "";
            switch(en)
            {
                case Enum_A_ARG_TYPE_Channel.MASTER:
                    RetVal = "Master";
                    break;
            }
            return(RetVal);
        }
        static public string[] Values_A_ARG_TYPE_Channel
        {
            get
            {
                string[] RetVal = new string[1]{"Master"};
                return(RetVal);
            }
        }
        static public string Enum_A_ARG_TYPE_PresetName_ToString(Enum_A_ARG_TYPE_PresetName en)
        {
            string RetVal = "";
            switch(en)
            {
                case Enum_A_ARG_TYPE_PresetName.FACTORYDEFAULTS:
                    RetVal = "FactoryDefaults";
                    break;
            }
            return(RetVal);
        }
        static public string[] Values_A_ARG_TYPE_PresetName
        {
            get
            {
                string[] RetVal = new string[1]{"FactoryDefaults"};
                return(RetVal);
            }
        }
        static public string Enum_PresetNameList_ToString(Enum_PresetNameList en)
        {
            string RetVal = "";
            switch(en)
            {
                case Enum_PresetNameList.FACTORYDEFAULTS:
                    RetVal = "FactoryDefaults";
                    break;
            }
            return(RetVal);
        }
        static public string[] Values_PresetNameList
        {
            get
            {
                string[] RetVal = new string[1]{"FactoryDefaults"};
                return(RetVal);
            }
        }
        public delegate void OnStateVariableModifiedHandler(DvRenderingControl sender);
        public event OnStateVariableModifiedHandler OnStateVariableModified_Mute;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_InstanceID;
        public event OnStateVariableModifiedHandler OnStateVariableModified_VolumeDB;
        public event OnStateVariableModifiedHandler OnStateVariableModified_Volume;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_PresetName;
        public event OnStateVariableModifiedHandler OnStateVariableModified_PresetNameList;
        public event OnStateVariableModifiedHandler OnStateVariableModified_LastChange;
        public event OnStateVariableModifiedHandler OnStateVariableModified_A_ARG_TYPE_Channel;
        public System.Boolean Mute
        {
            get
            {
               return((System.Boolean)_S.GetStateVariable("Mute"));
            }
            set
            {
               _S.SetStateVariable("Mute", value);
            }
        }
        public System.UInt32 A_ARG_TYPE_InstanceID
        {
            get
            {
               return((System.UInt32)_S.GetStateVariable("A_ARG_TYPE_InstanceID"));
            }
            set
            {
               _S.SetStateVariable("A_ARG_TYPE_InstanceID", value);
            }
        }
        public System.Int16 VolumeDB
        {
            get
            {
               return((System.Int16)_S.GetStateVariable("VolumeDB"));
            }
            set
            {
               _S.SetStateVariable("VolumeDB", value);
            }
        }
        public System.UInt16 Volume
        {
            get
            {
               return((System.UInt16)_S.GetStateVariable("Volume"));
            }
            set
            {
               _S.SetStateVariable("Volume", value);
            }
        }
        public System.String Evented_LastChange
        {
            get
            {
               return((System.String)_S.GetStateVariable("LastChange"));
            }
            set
            {
               _S.SetStateVariable("LastChange", value);
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Mute
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Mute")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Mute")).Accumulator = value;
            }
        }
        public double ModerationDuration_Mute
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Mute")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Mute")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_InstanceID
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_InstanceID")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_InstanceID")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_InstanceID
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_InstanceID")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_InstanceID")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_VolumeDB
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("VolumeDB")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("VolumeDB")).Accumulator = value;
            }
        }
        public double ModerationDuration_VolumeDB
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("VolumeDB")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("VolumeDB")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_Volume
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Volume")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Volume")).Accumulator = value;
            }
        }
        public double ModerationDuration_Volume
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Volume")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("Volume")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_PresetName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_PresetName")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_PresetName")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_PresetName
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_PresetName")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_PresetName")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_PresetNameList
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PresetNameList")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PresetNameList")).Accumulator = value;
            }
        }
        public double ModerationDuration_PresetNameList
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PresetNameList")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("PresetNameList")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_LastChange
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("LastChange")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("LastChange")).Accumulator = value;
            }
        }
        public double ModerationDuration_LastChange
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("LastChange")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("LastChange")).ModerationPeriod = value;
            }
        }
        public UPnPModeratedStateVariable.IAccumulator Accumulator_A_ARG_TYPE_Channel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Channel")).Accumulator);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Channel")).Accumulator = value;
            }
        }
        public double ModerationDuration_A_ARG_TYPE_Channel
        {
            get
            {
                 return(((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Channel")).ModerationPeriod);
            }
            set
            {
                 ((UPnPModeratedStateVariable)_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Channel")).ModerationPeriod = value;
            }
        }
        public delegate void Delegate_GetMute(System.UInt32 InstanceID, DvRenderingControl.Enum_A_ARG_TYPE_Channel Channel, out System.Boolean CurrentMute);
        public delegate void Delegate_GetVolume(System.UInt32 InstanceID, DvRenderingControl.Enum_A_ARG_TYPE_Channel Channel, out System.UInt16 CurrentVolume);
        public delegate void Delegate_GetVolumeDB(System.UInt32 InstanceID, DvRenderingControl.Enum_A_ARG_TYPE_Channel Channel, out System.Int16 CurrentVolume);
        public delegate void Delegate_GetVolumeDBRange(System.UInt32 InstanceID, DvRenderingControl.Enum_A_ARG_TYPE_Channel Channel, out System.Int16 MinValue, out System.Int16 MaxValue);
        public delegate void Delegate_ListPresets(System.UInt32 InstanceID, out DvRenderingControl.Enum_PresetNameList CurrentPresetNameList);
        public delegate void Delegate_SelectPreset(System.UInt32 InstanceID, DvRenderingControl.Enum_A_ARG_TYPE_PresetName PresetName);
        public delegate void Delegate_SetMute(System.UInt32 InstanceID, DvRenderingControl.Enum_A_ARG_TYPE_Channel Channel, System.Boolean DesiredMute);
        public delegate void Delegate_SetVolume(System.UInt32 InstanceID, DvRenderingControl.Enum_A_ARG_TYPE_Channel Channel, System.UInt16 DesiredVolume);

        public Delegate_GetMute External_GetMute = null;
        public Delegate_GetVolume External_GetVolume = null;
        public Delegate_GetVolumeDB External_GetVolumeDB = null;
        public Delegate_GetVolumeDBRange External_GetVolumeDBRange = null;
        public Delegate_ListPresets External_ListPresets = null;
        public Delegate_SelectPreset External_SelectPreset = null;
        public Delegate_SetMute External_SetMute = null;
        public Delegate_SetVolume External_SetVolume = null;

        public void RemoveStateVariable_Mute()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Mute"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_InstanceID()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_InstanceID"));
        }
        public void RemoveStateVariable_VolumeDB()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("VolumeDB"));
        }
        public void RemoveStateVariable_Volume()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("Volume"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_PresetName()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_PresetName"));
        }
        public void RemoveStateVariable_PresetNameList()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("PresetNameList"));
        }
        public void RemoveStateVariable_LastChange()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("LastChange"));
        }
        public void RemoveStateVariable_A_ARG_TYPE_Channel()
        {
            _S.GetUPnPService().RemoveStateVariable(_S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Channel"));
        }
        public void RemoveAction_GetMute()
        {
             _S.GetUPnPService().RemoveMethod("GetMute");
        }
        public void RemoveAction_GetVolume()
        {
             _S.GetUPnPService().RemoveMethod("GetVolume");
        }
        public void RemoveAction_GetVolumeDB()
        {
             _S.GetUPnPService().RemoveMethod("GetVolumeDB");
        }
        public void RemoveAction_GetVolumeDBRange()
        {
             _S.GetUPnPService().RemoveMethod("GetVolumeDBRange");
        }
        public void RemoveAction_ListPresets()
        {
             _S.GetUPnPService().RemoveMethod("ListPresets");
        }
        public void RemoveAction_SelectPreset()
        {
             _S.GetUPnPService().RemoveMethod("SelectPreset");
        }
        public void RemoveAction_SetMute()
        {
             _S.GetUPnPService().RemoveMethod("SetMute");
        }
        public void RemoveAction_SetVolume()
        {
             _S.GetUPnPService().RemoveMethod("SetVolume");
        }
        public System.Net.IPEndPoint GetCaller()
        {
             return(_S.GetUPnPService().GetCaller());
        }
        public System.Net.IPEndPoint GetReceiver()
        {
             return(_S.GetUPnPService().GetReceiver());
        }

        private class _DvRenderingControl
        {
            private DvRenderingControl Outer = null;
            private UPnPService S;
            internal _DvRenderingControl(DvRenderingControl n)
            {
                Outer = n;
                S = BuildUPnPService();
            }
            public UPnPService GetUPnPService()
            {
                return(S);
            }
            public void SetStateVariable(string VarName, object VarValue)
            {
               S.SetStateVariable(VarName,VarValue);
            }
            public object GetStateVariable(string VarName)
            {
               return(S.GetStateVariable(VarName));
            }
            protected UPnPService BuildUPnPService()
            {
                UPnPStateVariable[] RetVal = new UPnPStateVariable[8];
                RetVal[0] = new UPnPModeratedStateVariable("Mute", typeof(System.Boolean), false);
                RetVal[0].AddAssociation("GetMute", "CurrentMute");
                RetVal[0].AddAssociation("SetMute", "DesiredMute");
                RetVal[1] = new UPnPModeratedStateVariable("A_ARG_TYPE_InstanceID", typeof(System.UInt32), false);
                RetVal[1].AddAssociation("GetMute", "InstanceID");
                RetVal[1].AddAssociation("GetVolume", "InstanceID");
                RetVal[1].AddAssociation("GetVolumeDB", "InstanceID");
                RetVal[1].AddAssociation("GetVolumeDBRange", "InstanceID");
                RetVal[1].AddAssociation("ListPresets", "InstanceID");
                RetVal[1].AddAssociation("SelectPreset", "InstanceID");
                RetVal[1].AddAssociation("SetMute", "InstanceID");
                RetVal[1].AddAssociation("SetVolume", "InstanceID");
                RetVal[2] = new UPnPModeratedStateVariable("VolumeDB", typeof(System.Int16), false);
                RetVal[2].SetRange((System.Int16)(-32767),(System.Int16)(32767),null);
                RetVal[2].AddAssociation("GetVolumeDB", "CurrentVolume");
                RetVal[2].AddAssociation("GetVolumeDBRange", "MinValue");
                RetVal[2].AddAssociation("GetVolumeDBRange", "MaxValue");
                RetVal[3] = new UPnPModeratedStateVariable("Volume", typeof(System.UInt16), false);
                RetVal[3].SetRange((System.UInt16)(0),(System.UInt16)(100),(System.UInt16)1);
                RetVal[3].AddAssociation("GetVolume", "CurrentVolume");
                RetVal[3].AddAssociation("SetVolume", "DesiredVolume");
                RetVal[4] = new UPnPModeratedStateVariable("A_ARG_TYPE_PresetName", typeof(System.String), false);
                RetVal[4].AllowedStringValues = new string[1]{"FactoryDefaults"};
                RetVal[4].AddAssociation("SelectPreset", "PresetName");
                RetVal[5] = new UPnPModeratedStateVariable("PresetNameList", typeof(System.String), false);
                RetVal[5].AllowedStringValues = new string[1]{"FactoryDefaults"};
                RetVal[5].AddAssociation("ListPresets", "CurrentPresetNameList");
                RetVal[6] = new UPnPModeratedStateVariable("LastChange", typeof(System.String), true);
                RetVal[7] = new UPnPModeratedStateVariable("A_ARG_TYPE_Channel", typeof(System.String), false);
                RetVal[7].AllowedStringValues = new string[1]{"Master"};
                RetVal[7].AddAssociation("GetMute", "Channel");
                RetVal[7].AddAssociation("GetVolume", "Channel");
                RetVal[7].AddAssociation("GetVolumeDB", "Channel");
                RetVal[7].AddAssociation("GetVolumeDBRange", "Channel");
                RetVal[7].AddAssociation("SetMute", "Channel");
                RetVal[7].AddAssociation("SetVolume", "Channel");

                UPnPService S = new UPnPService(1, "urn:upnp-org:serviceId:RenderingControl", URN, true, this);
                for(int i=0;i<RetVal.Length;++i)
                {
                   S.AddStateVariable(RetVal[i]);
                }
                S.AddMethod("GetMute");
                S.AddMethod("GetVolume");
                S.AddMethod("GetVolumeDB");
                S.AddMethod("GetVolumeDBRange");
                S.AddMethod("ListPresets");
                S.AddMethod("SelectPreset");
                S.AddMethod("SetMute");
                S.AddMethod("SetVolume");
                return(S);
            }

            public void GetMute(System.UInt32 InstanceID, System.String Channel, out System.Boolean CurrentMute)
            {
                Enum_A_ARG_TYPE_Channel e_Channel;
                switch(Channel)
                {
                    case "Master":
                        e_Channel = Enum_A_ARG_TYPE_Channel.MASTER;
                        break;
                    default:
                        e_Channel = 0;
                        break;
                }
                if (Outer.External_GetMute != null)
                {
                    Outer.External_GetMute(InstanceID, e_Channel, out CurrentMute);
                }
                else
                {
                    Sink_GetMute(InstanceID, e_Channel, out CurrentMute);
                }
            }
            public void GetVolume(System.UInt32 InstanceID, System.String Channel, out System.UInt16 CurrentVolume)
            {
                Enum_A_ARG_TYPE_Channel e_Channel;
                switch(Channel)
                {
                    case "Master":
                        e_Channel = Enum_A_ARG_TYPE_Channel.MASTER;
                        break;
                    default:
                        e_Channel = 0;
                        break;
                }
                if (Outer.External_GetVolume != null)
                {
                    Outer.External_GetVolume(InstanceID, e_Channel, out CurrentVolume);
                }
                else
                {
                    Sink_GetVolume(InstanceID, e_Channel, out CurrentVolume);
                }
            }
            public void GetVolumeDB(System.UInt32 InstanceID, System.String Channel, out System.Int16 CurrentVolume)
            {
                Enum_A_ARG_TYPE_Channel e_Channel;
                switch(Channel)
                {
                    case "Master":
                        e_Channel = Enum_A_ARG_TYPE_Channel.MASTER;
                        break;
                    default:
                        e_Channel = 0;
                        break;
                }
                if (Outer.External_GetVolumeDB != null)
                {
                    Outer.External_GetVolumeDB(InstanceID, e_Channel, out CurrentVolume);
                }
                else
                {
                    Sink_GetVolumeDB(InstanceID, e_Channel, out CurrentVolume);
                }
            }
            public void GetVolumeDBRange(System.UInt32 InstanceID, System.String Channel, out System.Int16 MinValue, out System.Int16 MaxValue)
            {
                Enum_A_ARG_TYPE_Channel e_Channel;
                switch(Channel)
                {
                    case "Master":
                        e_Channel = Enum_A_ARG_TYPE_Channel.MASTER;
                        break;
                    default:
                        e_Channel = 0;
                        break;
                }
                if (Outer.External_GetVolumeDBRange != null)
                {
                    Outer.External_GetVolumeDBRange(InstanceID, e_Channel, out MinValue, out MaxValue);
                }
                else
                {
                    Sink_GetVolumeDBRange(InstanceID, e_Channel, out MinValue, out MaxValue);
                }
            }
            public void ListPresets(System.UInt32 InstanceID, out System.String CurrentPresetNameList)
            {
                Enum_PresetNameList e_CurrentPresetNameList;
                if (Outer.External_ListPresets != null)
                {
                    Outer.External_ListPresets(InstanceID, out e_CurrentPresetNameList);
                }
                else
                {
                    Sink_ListPresets(InstanceID, out e_CurrentPresetNameList);
                }
                switch(e_CurrentPresetNameList)
                {
                    case Enum_PresetNameList.FACTORYDEFAULTS:
                        CurrentPresetNameList = "FactoryDefaults";
                        break;
                    default:
                        CurrentPresetNameList = "";
                        break;
                }
            }
            public void SelectPreset(System.UInt32 InstanceID, System.String PresetName)
            {
                Enum_A_ARG_TYPE_PresetName e_PresetName;
                switch(PresetName)
                {
                    case "FactoryDefaults":
                        e_PresetName = Enum_A_ARG_TYPE_PresetName.FACTORYDEFAULTS;
                        break;
                    default:
                        e_PresetName = 0;
                        break;
                }
                if (Outer.External_SelectPreset != null)
                {
                    Outer.External_SelectPreset(InstanceID, e_PresetName);
                }
                else
                {
                    Sink_SelectPreset(InstanceID, e_PresetName);
                }
            }
            public void SetMute(System.UInt32 InstanceID, System.String Channel, System.Boolean DesiredMute)
            {
                Enum_A_ARG_TYPE_Channel e_Channel;
                switch(Channel)
                {
                    case "Master":
                        e_Channel = Enum_A_ARG_TYPE_Channel.MASTER;
                        break;
                    default:
                        e_Channel = 0;
                        break;
                }
                if (Outer.External_SetMute != null)
                {
                    Outer.External_SetMute(InstanceID, e_Channel, DesiredMute);
                }
                else
                {
                    Sink_SetMute(InstanceID, e_Channel, DesiredMute);
                }
            }
            public void SetVolume(System.UInt32 InstanceID, System.String Channel, System.UInt16 DesiredVolume)
            {
                Enum_A_ARG_TYPE_Channel e_Channel;
                switch(Channel)
                {
                    case "Master":
                        e_Channel = Enum_A_ARG_TYPE_Channel.MASTER;
                        break;
                    default:
                        e_Channel = 0;
                        break;
                }
                if (Outer.External_SetVolume != null)
                {
                    Outer.External_SetVolume(InstanceID, e_Channel, DesiredVolume);
                }
                else
                {
                    Sink_SetVolume(InstanceID, e_Channel, DesiredVolume);
                }
            }

            public Delegate_GetMute Sink_GetMute;
            public Delegate_GetVolume Sink_GetVolume;
            public Delegate_GetVolumeDB Sink_GetVolumeDB;
            public Delegate_GetVolumeDBRange Sink_GetVolumeDBRange;
            public Delegate_ListPresets Sink_ListPresets;
            public Delegate_SelectPreset Sink_SelectPreset;
            public Delegate_SetMute Sink_SetMute;
            public Delegate_SetVolume Sink_SetVolume;
        }
        public DvRenderingControl()
        {
            _S = new _DvRenderingControl(this);
            _S.GetUPnPService().GetStateVariableObject("Mute").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Mute);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_InstanceID").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_InstanceID);
            _S.GetUPnPService().GetStateVariableObject("VolumeDB").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_VolumeDB);
            _S.GetUPnPService().GetStateVariableObject("Volume").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_Volume);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_PresetName").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_PresetName);
            _S.GetUPnPService().GetStateVariableObject("PresetNameList").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_PresetNameList);
            _S.GetUPnPService().GetStateVariableObject("LastChange").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_LastChange);
            _S.GetUPnPService().GetStateVariableObject("A_ARG_TYPE_Channel").OnModified += new UPnPStateVariable.ModifiedHandler(OnModifiedSink_A_ARG_TYPE_Channel);
            _S.Sink_GetMute = new Delegate_GetMute(GetMute);
            _S.Sink_GetVolume = new Delegate_GetVolume(GetVolume);
            _S.Sink_GetVolumeDB = new Delegate_GetVolumeDB(GetVolumeDB);
            _S.Sink_GetVolumeDBRange = new Delegate_GetVolumeDBRange(GetVolumeDBRange);
            _S.Sink_ListPresets = new Delegate_ListPresets(ListPresets);
            _S.Sink_SelectPreset = new Delegate_SelectPreset(SelectPreset);
            _S.Sink_SetMute = new Delegate_SetMute(SetMute);
            _S.Sink_SetVolume = new Delegate_SetVolume(SetVolume);
        }
        public DvRenderingControl(string ID):this()
        {
            _S.GetUPnPService().ServiceID = ID;
        }
        public UPnPService GetUPnPService()
        {
            return(_S.GetUPnPService());
        }
        private void OnModifiedSink_Mute(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_Mute != null) OnStateVariableModified_Mute(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_InstanceID(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_InstanceID != null) OnStateVariableModified_A_ARG_TYPE_InstanceID(this);
        }
        private void OnModifiedSink_VolumeDB(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_VolumeDB != null) OnStateVariableModified_VolumeDB(this);
        }
        private void OnModifiedSink_Volume(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_Volume != null) OnStateVariableModified_Volume(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_PresetName(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_PresetName != null) OnStateVariableModified_A_ARG_TYPE_PresetName(this);
        }
        private void OnModifiedSink_PresetNameList(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_PresetNameList != null) OnStateVariableModified_PresetNameList(this);
        }
        private void OnModifiedSink_LastChange(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_LastChange != null) OnStateVariableModified_LastChange(this);
        }
        private void OnModifiedSink_A_ARG_TYPE_Channel(UPnPStateVariable sender, object NewValue)
        {
            if (OnStateVariableModified_A_ARG_TYPE_Channel != null) OnStateVariableModified_A_ARG_TYPE_Channel(this);
        }
        //}}}}} End of Code Block

        #endregion

        /// <summary>
        /// Action: GetMute
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="Channel">Associated State Variable: A_ARG_TYPE_Channel</param>
        /// <param name="CurrentMute">Associated State Variable: Mute</param>
        public void GetMute(System.UInt32 InstanceID, Enum_A_ARG_TYPE_Channel Channel, out System.Boolean CurrentMute)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetVolume
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="Channel">Associated State Variable: A_ARG_TYPE_Channel</param>
        /// <param name="CurrentVolume">Associated State Variable: Volume</param>
        public void GetVolume(System.UInt32 InstanceID, Enum_A_ARG_TYPE_Channel Channel, out System.UInt16 CurrentVolume)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetVolumeDB
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="Channel">Associated State Variable: A_ARG_TYPE_Channel</param>
        /// <param name="CurrentVolume">Associated State Variable: VolumeDB</param>
        public void GetVolumeDB(System.UInt32 InstanceID, Enum_A_ARG_TYPE_Channel Channel, out System.Int16 CurrentVolume)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: GetVolumeDBRange
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="Channel">Associated State Variable: A_ARG_TYPE_Channel</param>
        /// <param name="MinValue">Associated State Variable: VolumeDB</param>
        /// <param name="MaxValue">Associated State Variable: VolumeDB</param>
        public void GetVolumeDBRange(System.UInt32 InstanceID, Enum_A_ARG_TYPE_Channel Channel, out System.Int16 MinValue, out System.Int16 MaxValue)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: ListPresets
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="CurrentPresetNameList">Associated State Variable: PresetNameList</param>
        public void ListPresets(System.UInt32 InstanceID, out Enum_PresetNameList CurrentPresetNameList)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SelectPreset
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="PresetName">Associated State Variable: A_ARG_TYPE_PresetName</param>
        public void SelectPreset(System.UInt32 InstanceID, Enum_A_ARG_TYPE_PresetName PresetName)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetMute
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="Channel">Associated State Variable: A_ARG_TYPE_Channel</param>
        /// <param name="DesiredMute">Associated State Variable: Mute</param>
        public void SetMute(System.UInt32 InstanceID, Enum_A_ARG_TYPE_Channel Channel, System.Boolean DesiredMute)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
        /// <summary>
        /// Action: SetVolume
        /// </summary>
        /// <param name="InstanceID">Associated State Variable: A_ARG_TYPE_InstanceID</param>
        /// <param name="Channel">Associated State Variable: A_ARG_TYPE_Channel</param>
        /// <param name="DesiredVolume">Associated State Variable: Volume</param>
        public void SetVolume(System.UInt32 InstanceID, Enum_A_ARG_TYPE_Channel Channel, System.UInt16 DesiredVolume)
        {
            //ToDo: Add Your implementation here, and remove exception
            throw(new UPnPCustomException(800,"This method has not been completely implemented..."));
        }
    }
}